import type { Move } from "shogi-core";
import { describe, expect, it } from "vitest";
import { exportToKif, parseKifMoves, validateKifFormat } from "./kif";

describe("KIF format utilities", () => {
    describe("exportToKif", () => {
        it("should export empty game correctly", () => {
            const result = exportToKif([]);

            expect(result).toContain("# KIF形式棋譜ファイル Generated by Shogi Web App");
            expect(result).toContain("手数----指手---------消費時間--");
            expect(result).not.toContain("まで");
        });

        it("should export simple pawn move", () => {
            const moves: Move[] = [
                {
                    type: "move",
                    from: { row: 7, column: 7 },
                    to: { row: 6, column: 7 },
                    piece: { type: "pawn", owner: "black", promoted: false },
                    promote: false,
                    captured: null,
                },
            ];

            const result = exportToKif(moves);

            expect(result).toContain("  1 7六歩");
            expect(result).toContain("まで1手で対局終了");
        });

        it("should export drop move", () => {
            const moves: Move[] = [
                {
                    type: "drop",
                    to: { row: 5, column: 5 },
                    piece: { type: "pawn", owner: "black", promoted: false },
                },
            ];

            const result = exportToKif(moves);

            expect(result).toContain("  1 5五歩打");
        });

        it("should export capture move", () => {
            const moves: Move[] = [
                {
                    type: "move",
                    from: { row: 7, column: 7 },
                    to: { row: 6, column: 7 },
                    piece: { type: "pawn", owner: "black", promoted: false },
                    promote: false,
                    captured: { type: "pawn", owner: "white", promoted: false },
                },
            ];

            const result = exportToKif(moves);

            expect(result).toContain("  1 7六歩取");
        });

        it("should export promotion move", () => {
            const moves: Move[] = [
                {
                    type: "move",
                    from: { row: 2, column: 1 },
                    to: { row: 1, column: 1 },
                    piece: { type: "pawn", owner: "black", promoted: false },
                    promote: true,
                    captured: null,
                },
            ];

            const result = exportToKif(moves);

            expect(result).toContain("  1 1一歩成");
        });

        it("should export multiple moves with correct numbering", () => {
            const moves: Move[] = [
                {
                    type: "move",
                    from: { row: 7, column: 7 },
                    to: { row: 6, column: 7 },
                    piece: { type: "pawn", owner: "black", promoted: false },
                    promote: false,
                    captured: null,
                },
                {
                    type: "move",
                    from: { row: 3, column: 3 },
                    to: { row: 4, column: 3 },
                    piece: { type: "pawn", owner: "white", promoted: false },
                    promote: false,
                    captured: null,
                },
                {
                    type: "move",
                    from: { row: 7, column: 2 },
                    to: { row: 6, column: 2 },
                    piece: { type: "pawn", owner: "black", promoted: false },
                    promote: false,
                    captured: null,
                },
            ];

            const result = exportToKif(moves);

            expect(result).toContain("  1 7六歩");
            expect(result).toContain("  2 3四歩");
            expect(result).toContain("  3 2六歩");
            expect(result).toContain("まで3手で対局終了");
        });

        it("should include game info in header", () => {
            const gameInfo = {
                先手: "テストプレイヤー1",
                后手: "テストプレイヤー2",
                棋战: "テスト対局",
            };

            const result = exportToKif([], gameInfo);

            expect(result).toContain("# 先手：テストプレイヤー1");
            expect(result).toContain("# 後手：テストプレイヤー2");
            expect(result).toContain("# 棋戦：テスト対局");
        });
    });

    describe("validateKifFormat", () => {
        it("should accept valid KIF format", () => {
            const validKif = `# KIF形式棋譜ファイル
手数----指手---------消費時間--
  1 7六歩
まで1手で対局終了`;

            const result = validateKifFormat(validKif);
            expect(result.valid).toBe(true);
            expect(result.error).toBeUndefined();
        });

        it("should reject empty content", () => {
            const result = validateKifFormat("");
            expect(result.valid).toBe(false);
            expect(result.error).toBe("空のファイルです");
        });

        it("should reject content without header", () => {
            const invalidKif = "これはKIFファイルではありません";

            const result = validateKifFormat(invalidKif);
            expect(result.valid).toBe(false);
            expect(result.error).toBe("KIF形式のヘッダーが見つかりません");
        });
    });

    describe("parseKifMoves", () => {
        it("should parse simple drop move", () => {
            const kifContent = `# KIF形式棋譜ファイル
手数----指手---------消費時間--
  1 5五歩打
まで1手で対局終了`;

            const moves = parseKifMoves(kifContent);

            expect(moves).toHaveLength(1);
            expect(moves[0].type).toBe("drop");
            expect(moves[0].to).toEqual({ row: 5, column: 5 });
            expect(moves[0].piece.type).toBe("pawn");
            expect(moves[0].piece.owner).toBe("black");
        });

        it("should handle empty KIF file", () => {
            const kifContent = `# KIF形式棋譜ファイル
手数----指手---------消費時間--
まで0手で対局終了`;

            const moves = parseKifMoves(kifContent);
            expect(moves).toHaveLength(0);
        });

        it("should parse multiple drop moves with correct players", () => {
            const kifContent = `# KIF形式棋譜ファイル
手数----指手---------消費時間--
  1 7六歩打
  2 3四歩打
  3 2六歩打
まで3手で対局終了`;

            const moves = parseKifMoves(kifContent);

            expect(moves).toHaveLength(3);
            expect(moves[0].piece.owner).toBe("black"); // 奇数手は先手
            expect(moves[1].piece.owner).toBe("white"); // 偶数手は後手
            expect(moves[2].piece.owner).toBe("black"); // 奇数手は先手
        });

        it("should ignore non-drop moves (implementation limitation)", () => {
            const kifContent = `# KIF形式棋譜ファイル
手数----指手---------消費時間--
  1 7六歩
  2 5五歩打
まで2手で対局終了`;

            const moves = parseKifMoves(kifContent);

            // 打でない手は無視される（現在の実装制限）
            expect(moves).toHaveLength(1);
            expect(moves[0].type).toBe("drop");
            expect(moves[0].to).toEqual({ row: 5, column: 5 });
        });

        it("should handle different piece types", () => {
            const kifContent = `# KIF形式棋譜ファイル
手数----指手---------消費時間--
  1 5五歩打
  2 4四香打
  3 3三桂打
  4 2二銀打
  5 1一金打
まで5手で対局終了`;

            const moves = parseKifMoves(kifContent);

            expect(moves).toHaveLength(5);
            expect(moves[0].piece.type).toBe("pawn");
            expect(moves[1].piece.type).toBe("lance");
            expect(moves[2].piece.type).toBe("knight");
            expect(moves[3].piece.type).toBe("silver");
            expect(moves[4].piece.type).toBe("gold");
        });
    });
});
