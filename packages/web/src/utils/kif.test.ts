import type { Move } from "shogi-core";
import { describe, expect, it } from "vitest";
import { exportToKif, parseKifMoves, validateKifFormat } from "./kif";

describe("KIF format utilities", () => {
    describe("exportToKif", () => {
        it("should export empty game correctly", () => {
            const result = exportToKif([]);

            expect(result).toContain("# KIF形式棋譜ファイル Generated by Shogi Web App");
            expect(result).toContain("手数----指手---------消費時間--");
            expect(result).not.toContain("まで");
        });

        it("should export simple pawn move", () => {
            const moves: Move[] = [
                {
                    type: "move",
                    from: { row: 7, column: 7 },
                    to: { row: 6, column: 7 },
                    piece: { type: "pawn", owner: "black", promoted: false },
                    promote: false,
                    captured: null,
                },
            ];

            const result = exportToKif(moves);

            expect(result).toContain("  1 7六歩");
            expect(result).toContain("まで1手で対局終了");
        });

        it("should export drop move", () => {
            const moves: Move[] = [
                {
                    type: "drop",
                    to: { row: 5, column: 5 },
                    piece: { type: "pawn", owner: "black", promoted: false },
                },
            ];

            const result = exportToKif(moves);

            expect(result).toContain("  1 5五歩打");
        });

        it("should export capture move", () => {
            const moves: Move[] = [
                {
                    type: "move",
                    from: { row: 7, column: 7 },
                    to: { row: 6, column: 7 },
                    piece: { type: "pawn", owner: "black", promoted: false },
                    promote: false,
                    captured: { type: "pawn", owner: "white", promoted: false },
                },
            ];

            const result = exportToKif(moves);

            expect(result).toContain("  1 7六歩取");
        });

        it("should export promotion move", () => {
            const moves: Move[] = [
                {
                    type: "move",
                    from: { row: 2, column: 1 },
                    to: { row: 1, column: 1 },
                    piece: { type: "pawn", owner: "black", promoted: false },
                    promote: true,
                    captured: null,
                },
            ];

            const result = exportToKif(moves);

            expect(result).toContain("  1 1一歩成");
        });

        it("should export multiple moves with correct numbering", () => {
            const moves: Move[] = [
                {
                    type: "move",
                    from: { row: 7, column: 7 },
                    to: { row: 6, column: 7 },
                    piece: { type: "pawn", owner: "black", promoted: false },
                    promote: false,
                    captured: null,
                },
                {
                    type: "move",
                    from: { row: 3, column: 3 },
                    to: { row: 4, column: 3 },
                    piece: { type: "pawn", owner: "white", promoted: false },
                    promote: false,
                    captured: null,
                },
                {
                    type: "move",
                    from: { row: 7, column: 2 },
                    to: { row: 6, column: 2 },
                    piece: { type: "pawn", owner: "black", promoted: false },
                    promote: false,
                    captured: null,
                },
            ];

            const result = exportToKif(moves);

            expect(result).toContain("  1 7六歩");
            expect(result).toContain("  2 3四歩");
            expect(result).toContain("  3 2六歩");
            expect(result).toContain("まで3手で対局終了");
        });

        it("should include game info in header", () => {
            const gameInfo = {
                先手: "テストプレイヤー1",
                后手: "テストプレイヤー2",
                棋战: "テスト対局",
            };

            const result = exportToKif([], gameInfo);

            expect(result).toContain("# 先手：テストプレイヤー1");
            expect(result).toContain("# 後手：テストプレイヤー2");
            expect(result).toContain("# 棋戦：テスト対局");
        });
    });

    describe("validateKifFormat", () => {
        it("should accept valid KIF format", () => {
            const validKif = `# KIF形式棋譜ファイル
手数----指手---------消費時間--
  1 7六歩
まで1手で対局終了`;

            const result = validateKifFormat(validKif);
            expect(result.valid).toBe(true);
            expect(result.error).toBeUndefined();
        });

        it("should reject empty content", () => {
            const result = validateKifFormat("");
            expect(result.valid).toBe(false);
            expect(result.error).toBe("空のファイルです");
        });

        it("should reject content without header", () => {
            const invalidKif = "これはKIFファイルではありません";

            const result = validateKifFormat(invalidKif);
            expect(result.valid).toBe(false);
            expect(result.error).toBe("KIF形式のヘッダーが見つかりません");
        });
    });

    describe("parseKifMoves", () => {
        it("should parse simple drop move", () => {
            const kifContent = `# KIF形式棋譜ファイル
手数----指手---------消費時間--
  1 ５五歩打
まで1手で対局終了`;

            const moves = parseKifMoves(kifContent);

            expect(moves).toHaveLength(1);
            expect(moves[0].type).toBe("drop");
            expect(moves[0].to).toEqual({ row: 5, column: 5 });
            expect(moves[0].piece.type).toBe("pawn");
            expect(moves[0].piece.owner).toBe("black");
        });

        it("should handle empty KIF file", () => {
            const kifContent = `# KIF形式棋譜ファイル
手数----指手---------消費時間--
まで0手で対局終了`;

            const moves = parseKifMoves(kifContent);
            expect(moves).toHaveLength(0);
        });

        it("should parse multiple drop moves with correct players", () => {
            const kifContent = `# KIF形式棋譜ファイル
手数----指手---------消費時間--
  1 ７六歩打
  2 ３四歩打
  3 ２六歩打
まで3手で対局終了`;

            const moves = parseKifMoves(kifContent);

            expect(moves).toHaveLength(3);
            expect(moves[0].piece.owner).toBe("black"); // 奇数手は先手
            expect(moves[1].piece.owner).toBe("white"); // 偶数手は後手
            expect(moves[2].piece.owner).toBe("black"); // 奇数手は先手
        });

        it("should ignore non-drop moves (implementation limitation)", () => {
            const kifContent = `# KIF形式棋譜ファイル
手数----指手---------消費時間--
  1 ７六歩
  2 ５五歩打
まで2手で対局終了`;

            const moves = parseKifMoves(kifContent);

            // 打でない手は無視される（現在の実装制限）
            expect(moves).toHaveLength(1);
            expect(moves[0].type).toBe("drop");
            expect(moves[0].to).toEqual({ row: 5, column: 5 });
        });

        it("should handle different piece types", () => {
            const kifContent = `# KIF形式棋譜ファイル
手数----指手---------消費時間--
  1 ５五歩打
  2 ４四香打
  3 ３三桂打
  4 ２二銀打
  5 １一金打
まで5手で対局終了`;

            const moves = parseKifMoves(kifContent);

            expect(moves).toHaveLength(5);
            expect(moves[0].piece.type).toBe("pawn");
            expect(moves[1].piece.type).toBe("lance");
            expect(moves[2].piece.type).toBe("knight");
            expect(moves[3].piece.type).toBe("silver");
            expect(moves[4].piece.type).toBe("gold");
        });

        it("should parse real ぴよ将棋 KIF file", () => {
            const realKifContent = `# ---- ぴよ将棋w 棋譜ファイル ----
棋戦：ぴよ将棋w
開始日時：2025/06/17 23:20:19
終了日時：2025/06/17 23:28:45
先手：プレイヤー
後手：Lv1  ひよこ(R30)
手合割：平手
手数----指手---------消費時間--
   1 ２六歩(27)   ( 0:03/00:00:03)
   2 ８四歩(83)   ( 0:01/00:00:01)
   3 ２五歩(26)   ( 0:01/00:00:04)
   4 ８五歩(84)   ( 0:01/00:00:02)
   5 ７八金(69)   ( 0:01/00:00:05)
   6 ３二金(41)   ( 0:01/00:00:03)
   7 ２四歩(25)   ( 5:24/00:05:29)
   8 ２四歩(23)   ( 0:01/00:00:04)
   9 ２四飛(28)   ( 0:01/00:05:30)
  10 ２三歩打     ( 0:01/00:00:05)
  11 ２八飛(24)   ( 0:01/00:05:31)
  12 ３四歩(33)   ( 0:01/00:00:06)
  13 ７六歩(77)   ( 0:01/00:05:32)
  14 ８六歩(85)   ( 0:01/00:00:07)
  15 ８六歩(87)   ( 0:01/00:05:33)
  16 ８六飛(82)   ( 0:01/00:00:08)
  17 ８七歩打     ( 0:04/00:05:37)
  18 ７六飛(86)   ( 0:01/00:00:09)
  19 ６九玉(59)   ( 0:01/00:05:38)
  20 ５二玉(51)   ( 0:01/00:00:10)
  21 ４八銀(39)   ( 0:02/00:05:40)
  22 ７七飛成(76) ( 0:01/00:00:11)
  23 ７七角(88)   ( 0:03/00:05:43)
  24 ８二歩打     ( 0:01/00:00:12)
  25 ８八銀(79)   ( 0:08/00:05:51)
  26 ８三歩(82)   ( 0:01/00:00:13)
  27 ４六歩(47)   ( 0:06/00:05:57)
  28 ８四歩(83)   ( 0:01/00:00:14)
  29 ４七銀(48)   ( 0:02/00:05:59)
  30 ５四歩(53)   ( 0:01/00:00:15)
  31 ５六銀(47)   ( 0:01/00:06:00)
  32 ６四歩(63)   ( 0:01/00:00:16)
  33 ３六歩(37)   ( 0:04/00:06:04)
  34 ３三角(22)   ( 0:01/00:00:17)
  35 ４八飛(28)   ( 0:07/00:06:11)
  36 １二香(11)   ( 0:01/00:00:18)
  37 ３七桂(29)   ( 0:01/00:06:12)
  38 ８二銀(71)   ( 0:01/00:00:19)
  39 ４五歩(46)   ( 0:02/00:06:14)
  40 ９二香(91)   ( 0:01/00:00:20)
  41 ３五歩(36)   ( 0:04/00:06:18)
  42 ５三玉(52)   ( 0:01/00:00:21)
  43 ３四歩(35)   ( 0:03/00:06:21)
  44 ８五歩(84)   ( 0:01/00:00:22)
  45 ３三歩成(34) ( 0:02/00:06:23)
  46 ３三桂(21)   ( 0:01/00:00:23)
  47 ３四歩打     ( 0:03/00:06:26)
  48 ４五桂(33)   ( 0:01/00:00:24)
  49 ４五桂(37)   ( 0:01/00:06:27)
  50 ５二玉(53)   ( 0:01/00:00:25)
  51 ３三歩成(34) ( 0:19/00:06:46)
  52 ３三金(32)   ( 0:01/00:00:26)
  53 ３三桂成(45) ( 0:01/00:06:47)
  54 ７一金(61)   ( 0:01/00:00:27)
  55 ３二歩打     ( 0:08/00:06:55)
  56 ６二玉(52)   ( 0:01/00:00:28)
  57 ３一歩成(32) ( 0:01/00:06:56)
  58 ３七歩打     ( 0:01/00:00:29)
  59 ４三飛成(48) ( 0:02/00:06:58)
  60 ５一玉(62)   ( 0:01/00:00:30)
  61 ５二金打     ( 0:03/00:07:01)
  62 投了         ( 0:00/00:06:58)
まで61手で先手の勝ち`;

            const moves = parseKifMoves(realKifContent);

            // 現在の実装では駒打ちのみサポートなので、打った手のみ解析される
            // 10手目: ２三歩打, 17手目: ８七歩打, 24手目: ８二歩打, 47手目: ３四歩打, 55手目: ３二歩打, 58手目: ３七歩打, 61手目: ５二金打
            expect(moves.length).toBe(7); // 7つの駒打ちがある

            // 駒打ちの手をチェック
            const dropMoves = moves.filter((move) => move.type === "drop");
            expect(dropMoves.length).toBe(7);

            // 10手目: ２三歩打 (後手)
            expect(dropMoves[0].type).toBe("drop");
            expect(dropMoves[0].to).toEqual({ row: 3, column: 2 });
            expect(dropMoves[0].piece.type).toBe("pawn");
            expect(dropMoves[0].piece.owner).toBe("white"); // 10手目は後手

            // 17手目: ８七歩打 (先手)
            expect(dropMoves[1].type).toBe("drop");
            expect(dropMoves[1].to).toEqual({ row: 7, column: 8 });
            expect(dropMoves[1].piece.type).toBe("pawn");
            expect(dropMoves[1].piece.owner).toBe("black"); // 17手目は先手

            // 61手目: ５二金打 (先手)
            expect(dropMoves[6].type).toBe("drop");
            expect(dropMoves[6].to).toEqual({ row: 2, column: 5 });
            expect(dropMoves[6].piece.type).toBe("gold");
            expect(dropMoves[6].piece.owner).toBe("black"); // 61手目は先手
        });
    });
});
